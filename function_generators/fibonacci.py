# Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи,
# которая строится по правилу: каждое последующее число равно сумме двух предыдущих.
# Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел.
# При этом первые три числа равны 1 и имеем такую последовательность:
#
# 1, 1, 1, 3, 5, 9, 17, 31, 57, ...
#
# Итак, на вход программы поступает натуральное число N (N > 5) и необходимо определить функцию-генератор,
# которая бы возвращала N первых чисел последовательности Фибоначчи (включая первые три единицы).
#
# Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.).
# Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.
#
# Sample Input:
# 7
# Sample Output:
# 1 1 1 3 5 9 17
from typing import Generator


# версия со списком всех чисел
def fib(n: int) -> list[int]:
    subsequence = list()
    for i in range(1, n + 1):
        number = 1 if i < 4 else sum(subsequence[-1:-4:-1])
        subsequence.append(number)
        # yield number # если по заданию
    return subsequence


def fib1(n: int) -> Generator[int, None, None]:
    a = b = c = 1
    for i in range(1, n + 1):
        yield a
        a, b, c = b, c, a + b + c


num = int(input())
print(*fib(num))
print(*list(fib1(num)))

# для больших чисел
for num in fib1(num):
    print(num, end=' ')
