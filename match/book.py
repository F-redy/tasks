# Вводятся данные по книге в виде строки через запятую в формате (некоторые значения могут отсутствовать):
#
# id, автор, название, цена, год издания
#
# с помощью команд:
#
# t = (int, str, str, float, int)
# book = [t[i](x) if t[i] != str else x.strip() for i, x in enumerate(input().split(","))]
# Например, при вводе:
#
# "1, Балакирев С.М., Python, 2100, 2023"
#
# получим список:
#
# book = [1, 'Балакирев С.М.', 'Python', 2100.0, 2023]
#
# А при вводе:
#
# "1, Балакирев С.М., Python"
#
# список:
#
# book = [1, 'Балакирев С.М.', 'Python']
#
# И так далее.
#
# С помощью оператора match/case необходимо определить шаблоны для выделения следующей информации:
#
# автор, название
# автор, название, цена
# автор, название, год издания
# автор, название, цена, год издания
#
# Первый шаблон срабатывает, если есть только автор и название; второй, если появляется еще и цена; третий,
# если есть автор, название, год издания, но нет цены; последний, если имеются все данные.
#
# При срабатывании шаблона вывести на экран строку "Yes". Если ни один из шаблонов не сработал, то вывести строку "No".


test_case = [(1, 'Балакирев С.М.', 'Python', 2100.0, 2023, 'Yes'),
             (2, 'Зингаро. Д', 'Python без проблем', 1000.0, 2022, 'Yes'),
             (3, 'Бейдер Дэн', 'No'),
             (4, 'No'),
             (5, 'Яворски Михаил', 'Python. Лучшие практики и инструменты', 1500.1, 2021, 'Yes')]


def parse_book(book_date: list) -> str:
    match book_date:
        case (int(), str(), str()) \
             | (int(), str(), str(), int()) \
             | (int(), str(), str(), float()) \
             | (int(), str(), str(), float(), int()):
            return 'Yes'
        case _:
            return 'No'


t = (int, str, str, float, int)
# book = [t[i](x) if t[i] != str else x.strip() for i, x in enumerate(input().split(","))]

for i, (*test_book, answer) in enumerate(test_case, 1):
    assert parse_book(test_book) == answer, f'TEST №{i} - ERROR!\n'
    print(f'TEST №{i} - OK!')
